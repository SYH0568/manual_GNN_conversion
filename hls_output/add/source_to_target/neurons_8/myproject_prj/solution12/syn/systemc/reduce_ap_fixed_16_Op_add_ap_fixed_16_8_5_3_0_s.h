// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
// Version: 2019.2
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#ifndef _reduce_ap_fixed_16_Op_add_ap_fixed_16_8_5_3_0_s_HH_
#define _reduce_ap_fixed_16_Op_add_ap_fixed_16_8_5_3_0_s_HH_

#include "systemc.h"
#include "AESL_pkg.h"


namespace ap_rtl {

struct reduce_ap_fixed_16_Op_add_ap_fixed_16_8_5_3_0_s : public sc_module {
    // Port declarations 18
    sc_out< sc_logic > ap_ready;
    sc_in< sc_lv<16> > x_0_V_read;
    sc_in< sc_lv<16> > x_1_V_read;
    sc_in< sc_lv<16> > x_2_V_read;
    sc_in< sc_lv<16> > x_3_V_read;
    sc_in< sc_lv<16> > x_4_V_read;
    sc_in< sc_lv<16> > x_5_V_read;
    sc_in< sc_lv<16> > x_6_V_read;
    sc_in< sc_lv<16> > x_7_V_read;
    sc_in< sc_lv<16> > x_8_V_read;
    sc_in< sc_lv<16> > x_9_V_read;
    sc_in< sc_lv<16> > x_10_V_read;
    sc_in< sc_lv<16> > x_11_V_read;
    sc_in< sc_lv<16> > x_12_V_read;
    sc_in< sc_lv<16> > x_13_V_read;
    sc_in< sc_lv<16> > x_14_V_read;
    sc_in< sc_lv<16> > x_15_V_read;
    sc_out< sc_lv<16> > ap_return;


    // Module declarations
    reduce_ap_fixed_16_Op_add_ap_fixed_16_8_5_3_0_s(sc_module_name name);
    SC_HAS_PROCESS(reduce_ap_fixed_16_Op_add_ap_fixed_16_8_5_3_0_s);

    ~reduce_ap_fixed_16_Op_add_ap_fixed_16_8_5_3_0_s();

    sc_trace_file* mVcdFile;

    sc_signal< sc_lv<16> > add_ln703_2_fu_136_p2;
    sc_signal< sc_lv<16> > add_ln703_1_fu_130_p2;
    sc_signal< sc_lv<16> > add_ln703_5_fu_154_p2;
    sc_signal< sc_lv<16> > add_ln703_4_fu_148_p2;
    sc_signal< sc_lv<16> > add_ln703_6_fu_160_p2;
    sc_signal< sc_lv<16> > add_ln703_3_fu_142_p2;
    sc_signal< sc_lv<16> > add_ln703_9_fu_178_p2;
    sc_signal< sc_lv<16> > add_ln703_8_fu_172_p2;
    sc_signal< sc_lv<16> > add_ln703_12_fu_196_p2;
    sc_signal< sc_lv<16> > add_ln703_11_fu_190_p2;
    sc_signal< sc_lv<16> > add_ln703_13_fu_202_p2;
    sc_signal< sc_lv<16> > add_ln703_10_fu_184_p2;
    sc_signal< sc_lv<16> > add_ln703_14_fu_208_p2;
    sc_signal< sc_lv<16> > add_ln703_7_fu_166_p2;
    static const sc_logic ap_const_logic_1;
    static const bool ap_const_boolean_1;
    static const sc_logic ap_const_logic_0;
    // Thread declarations
    void thread_add_ln703_10_fu_184_p2();
    void thread_add_ln703_11_fu_190_p2();
    void thread_add_ln703_12_fu_196_p2();
    void thread_add_ln703_13_fu_202_p2();
    void thread_add_ln703_14_fu_208_p2();
    void thread_add_ln703_1_fu_130_p2();
    void thread_add_ln703_2_fu_136_p2();
    void thread_add_ln703_3_fu_142_p2();
    void thread_add_ln703_4_fu_148_p2();
    void thread_add_ln703_5_fu_154_p2();
    void thread_add_ln703_6_fu_160_p2();
    void thread_add_ln703_7_fu_166_p2();
    void thread_add_ln703_8_fu_172_p2();
    void thread_add_ln703_9_fu_178_p2();
    void thread_ap_ready();
    void thread_ap_return();
};

}

using namespace ap_rtl;

#endif
